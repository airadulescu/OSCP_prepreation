Basics :

after initial foothold: 
  extract password hashes with "Mimikatz"
  

  understanding windows privileges and access control mechanisms.
  Obtain situational awarness
  search for sensitive information on windows systems.
  find sensitive information generated by powershell.
  become familiar with automated enumetaion tools.
  
  =========================================================================
  Every target is unique
  
  ==========================================================================
  windows privilege and access control mechanism :
  
  1. Security identifier (SID)
  2. Access token
  3. Mandatory Integrity control
  4. User account control
  
>>>Security Identifiers:: windows uses SID to identify entities (entity/principal that can be authenticated by windows) 
SID for local users: Generated by Local security authority (LSA).
SID for domain group users: Generated by Domain Controller (DC).
SID cannot be changed.

SID strcture: S-R-X-Y 
S: SID
R: Revision : always set to 1
X: Identifier authority :Eg. 5- NT_Authority (used for local for domain group users)
Y: sub Authorities of X : Consists pf relative identifier(RID)

=================================================================================
Well known SID's :
S-1-0-0                       Nobody        
S-1-1-0	                      Everybody
S-1-5-11                      Authenticated Users
S-1-5-18                      Local System
S-1-5-domainidentifier-500    Administrator

==================================================================================
how windows authentication works:
once user is authenticated windows generates authentication tokens .Tokens contains information that describe the security context of a given user.

security context: contains SID of user, SID of groups user is member of , user and group previleges an dfurther information describing the scope of the token.

when user starts a thread or process a token will be assigned : this token is called primary token.

impersonation token : a thread can also have it assigned, IT provide a different security context than the process that owns the thread. The thread interacts with the objects on behlf of the impersonation token instead of the promary token of the process.

mandatory integrity control: uses intrgrity level to access the securable objects. 

========================================================================================

Integrity levels:  can be displayed with process explorer.
>>>$whoami/groups
and for files "icacls".

User Account Control(UAC):  

=========================================================================================
Situatinal awareness: Information regarding the current user right permission:

- Username and hostname
- Group memberships of the current user
- Existing users and groups
- Operating system, version and architecture
- Network information
- Installed applications
- Running processes
==========================================================================================
windows inforamtion gathering :
1. $whoami : user infromation
2. $whoami /groups : to check the user is part of what group
3. $Get-LocalUser : to get list of all local users
4. $Get-LocalGroup : To get list of all local groups

to check installed application :
Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname 

Getting details of all installed software ::
Get-ChildItem "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
foreach($obj in $InstalledSoftware){write-host $obj.GetValue('DisplayName') -NoNewline; write-host " - " -NoNewline; write-host $obj.GetValue('DisplayVersion')}


Getting Details of the software installed for the current user:
Get-ChildItem "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
foreach($obj in $InstalledSoftware){write-host $obj.GetValue('DisplayName') -NoNewline; write-host " - " -NoNewline; write-host $obj.GetValue('DisplayVersion')}






























